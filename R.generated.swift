//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MovieTableViewCell`.
    static let movieTableViewCell: Rswift.ReuseIdentifier<MovieTableViewCell> = Rswift.ReuseIdentifier(identifier: "MovieTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `MovieDetailViewController`, and contains static references to 1 segues.
    struct movieDetailViewController {
      /// Segue identifier `goToPosterView`.
      static let goToPosterView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MovieDetailViewController, PosterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToPosterView")
      
      /// Optionally returns a typed version of segue `goToPosterView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToPosterView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MovieDetailViewController, PosterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.movieDetailViewController.goToPosterView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MovieListViewController`, and contains static references to 1 segues.
    struct movieListViewController {
      /// Segue identifier `goToMovieDetail`.
      static let goToMovieDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MovieListViewController, MovieDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToMovieDetail")
      
      /// Optionally returns a typed version of segue `goToMovieDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToMovieDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MovieListViewController, MovieDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.movieListViewController.goToMovieDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Attention
      /// 
      /// Locales: en
      static let movieListAlertTitle = Rswift.StringResource(key: "movie.list.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en
      static let posterViewCloseButtonTitle = Rswift.StringResource(key: "poster.view.close.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Failed to request the movies
      /// 
      /// Locales: en
      static let movieListGenreRequestError = Rswift.StringResource(key: "movie.list.genre.request.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Movie
      /// 
      /// Locales: en
      static let movieDetailTitle = Rswift.StringResource(key: "movie.detail.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let movieListAlertButtonTitle = Rswift.StringResource(key: "movie.list.alert.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Upcoming Movies
      /// 
      /// Locales: en
      static let movieListTitle = Rswift.StringResource(key: "movie.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Attention
      /// 
      /// Locales: en
      static func movieListAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("movie.list.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en
      static func posterViewCloseButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("poster.view.close.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to request the movies
      /// 
      /// Locales: en
      static func movieListGenreRequestError(_: Void = ()) -> String {
        return NSLocalizedString("movie.list.genre.request.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Movie
      /// 
      /// Locales: en
      static func movieDetailTitle(_: Void = ()) -> String {
        return NSLocalizedString("movie.detail.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func movieListAlertButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("movie.list.alert.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Upcoming Movies
      /// 
      /// Locales: en
      static func movieListTitle(_: Void = ()) -> String {
        return NSLocalizedString("movie.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
